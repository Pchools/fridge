{"version":3,"sources":["components/home.js","components/item.js","components/register.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","Item","className","Register","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","axios","post","username","state","email","password","then","res","console","log","data","setState","confirm","handleChange","defineProperty","target","id","value","length","onSubmit","FormGroup","controlId","bssize","FormLabel","FormControl","autoFocus","type","onChange","Button","block","disabled","validate","Login","App","react_router_dom","style","headerStyle","react_router","path","component","background","color","padding","bottomMargin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56639ffc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n  \trender() {\n    \treturn (\n\t    \t<div>\n\t        \t<h1>Home</h1>\n\t        \t<p>Welcome to your fridge (user)</p>\n\t    \t</div>\n    \t);\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass Item extends Component {\n  render() {\n    return (\n      <div className=\"Item\">\n        Item\n        <p>This is the item (user)</p>\n      </div>\n    );\n  }\n}\n\nexport default Item;\n","import React, { Component } from 'react';\nimport { Button, FormGroup, FormControl, FormLabel } from 'react-bootstrap';\nimport axios from 'axios';\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      confirm: \"\"\n    };\n  }\n\n  validate() {\n    return this.state.password.length > 0 && this.state.email.length > 0 && this.state.password === this.state.confirm;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    axios.post('http://localhost:4000/register', {\n      username: this.state.email,\n      password: this.state.password\n    })\n    .then(res => console.log(res.data));\n    \n    this.setState({\n        email: '',\n        password: '',\n        confirm: ''\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\nrender() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <FormGroup controlId=\"email\" bssize=\"large\">\n            <FormLabel>Email</FormLabel>\n            <FormControl\n              autoFocus\n              type=\"email\"\n              onChange={this.handleChange}\n              value={this.state.email}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bssize=\"large\">\n            <FormLabel>Create Password</FormLabel>\n            <FormControl\n              type=\"password\"\n              onChange={this.handleChange}\n              value={this.state.password}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"confirm\" bssize=\"large\">\n            <FormLabel>Confirm Password</FormLabel>\n            <FormControl\n              type=\"password\"\n              onChange={this.handleChange}\n              value={this.state.confirm}\n            />\n          </FormGroup>\n          <Button block type=\"submit\" bssize=\"large\" disabled={!this.validate()}>\n            Register\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\n\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"Login\">\n        Log In\n        <p>Enter your username</p>\n        <p>Enter your password</p>\n        <p>login</p>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/home\";\nimport Item from \"./components/item\";\nimport Register from \"./components/register\";\nimport Login from \"./components/login\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1 style={headerStyle}>\n            Fridge\n          </h1>\n            <Switch>\n              <Route path=\"/login\" component={Login}/>\n              <Route path=\"/register\" component={Register} />\n              <Route path=\"/items/:id\" component={Item} />\n              <Route path=\"*\" component={Home} />\n            </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst headerStyle = {\n  background: '#ccccff',\n  color: '#ffffff',\n  padding: '5px',\n  bottomMargin: '5px'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}