{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Pchal\\\\cs_projects\\\\fridge\\\\fridge-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Pchal\\\\cs_projects\\\\fridge\\\\fridge-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Pchal\\\\cs_projects\\\\fridge\\\\fridge-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  // Initializing important variables\n  function AuthService(domain) {\n    _classCallCheck(this, AuthService);\n\n    this.domain = domain || 'http://localhost:4000'; // API server domain\n\n    this.fetch = this.fetch.bind(this); // React binding stuff\n\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(username, password) {\n      var _this = this;\n\n      // Get a token from api server using the fetch api\n      return this.fetch(\"\".concat(this.domain, \"/login\"), {\n        method: 'POST',\n        body: JSON.stringify({\n          username: username,\n          password: password\n        }) //console.log(username);\n        //console.log(password);\n\n      }).then(function (res) {\n        _this.setToken(res.token); // Setting the token in localStorage\n\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // GEtting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired. N\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json' // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["C:\\Users\\Pchal\\cs_projects\\fridge\\fridge-frontend\\src\\components\\authService.js"],"names":["decode","AuthService","domain","fetch","bind","login","getProfile","username","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","removeItem","url","options","headers","loggedIn","_checkStatus","response","json","status","error","Error","statusText"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,YAAnB;;IACqBC,W;;;AACjB;AACA,uBAAYC,MAAZ,EAAoB;AAAA;;AAChB,SAAKA,MAAL,GAAcA,MAAM,IAAI,uBAAxB,CADgB,CACgC;;AAChD,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb,CAFgB,CAEmB;;AACnC,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACH;;;;0BAEKG,Q,EAAUC,Q,EAAU;AAAA;;AACtB;AACA,aAAO,KAAKL,KAAL,WAAc,KAAKD,MAAnB,aAAmC;AACtCO,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,UAAAA,QAAQ,EAAEA,QADO;AAEjBC,UAAAA,QAAQ,EAAEA;AAFO,SAAf,CAFgC,CAMtC;AACA;;AAPsC,OAAnC,EAQJK,IARI,CAQC,UAAAC,GAAG,EAAI;AACX,QAAA,KAAI,CAACC,QAAL,CAAcD,GAAG,CAACE,KAAlB,EADW,CACc;;;AACzB,eAAOC,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACH,OAXM,CAAP;AAYH;;;+BAEU;AACP;AACA,UAAME,KAAK,GAAG,KAAKG,QAAL,EAAd,CAFO,CAEuB;;AAC9B,aAAO,CAAC,CAACH,KAAF,IAAW,CAAC,KAAKI,cAAL,CAAoBJ,KAApB,CAAnB,CAHO,CAGuC;AACjD;;;mCAEcA,K,EAAO;AAClB,UAAI;AACA,YAAMK,OAAO,GAAGrB,MAAM,CAACgB,KAAD,CAAtB;;AACA,YAAIK,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AAAE;AACnC,iBAAO,IAAP;AACH,SAFD,MAII,OAAO,KAAP;AACP,OAPD,CAQA,OAAOC,GAAP,EAAY;AACR,eAAO,KAAP;AACH;AACJ;;;6BAEQC,O,EAAS;AACd;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;;+BAEU;AACP;AACA,aAAOC,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BAEQ;AACL;AACAF,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACH;;;iCAEY;AACT;AACA,aAAO9B,MAAM,CAAC,KAAKmB,QAAL,EAAD,CAAb;AACH;;;;;;;;;;;;;gBAGKY,G,EAAKC,O,EAAS;AAChB;AACA,UAAMC,OAAO,GAAG;AACZ,kBAAU,kBADE;AAEZ,wBAAgB,kBAFJ,CAKhB;AACA;;AANgB,OAAhB;;AAOA,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjBD,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAKd,QAAL,EAAvC;AACH;;AAED,aAAOhB,KAAK,CAAC4B,GAAD;AACRE,QAAAA,OAAO,EAAPA;AADQ,SAELD,OAFK,EAAL,CAIFnB,IAJE,CAIG,KAAKsB,YAJR,EAKFtB,IALE,CAKG,UAAAuB,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OALX,CAAP;AAMH,K;;;iCAEYD,Q,EAAU;AACnB;AACA,UAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAAhD,EAAqD;AAAE;AACnD,eAAOF,QAAP;AACH,OAFD,MAEO;AACH,YAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,QAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,cAAMG,KAAN;AACH;AACJ;;;;;;SAhGgBtC,W","sourcesContent":["import decode from 'jwt-decode';\r\nexport default class AuthService {\r\n    // Initializing important variables\r\n    constructor(domain) {\r\n        this.domain = domain || 'http://localhost:4000' // API server domain\r\n        this.fetch = this.fetch.bind(this) // React binding stuff\r\n        this.login = this.login.bind(this)\r\n        this.getProfile = this.getProfile.bind(this)\r\n    }\r\n\r\n    login(username, password) {\r\n        // Get a token from api server using the fetch api\r\n        return this.fetch(`${this.domain}/login`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            })\r\n            //console.log(username);\r\n            //console.log(password);\r\n        }).then(res => {\r\n            this.setToken(res.token) // Setting the token in localStorage\r\n            return Promise.resolve(res);\r\n        })\r\n    }\r\n\r\n    loggedIn() {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken() // GEtting token from localstorage\r\n        return !!token && !this.isTokenExpired(token) // handwaiving here\r\n    }\r\n\r\n    isTokenExpired(token) {\r\n        try {\r\n            const decoded = decode(token);\r\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setToken(idToken) {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem('id_token', idToken)\r\n    }\r\n\r\n    getToken() {\r\n        // Retrieves the user token from localStorage\r\n        return localStorage.getItem('id_token')\r\n    }\r\n\r\n    logout() {\r\n        // Clear user token and profile data from localStorage\r\n        localStorage.removeItem('id_token');\r\n    }\r\n\r\n    getProfile() {\r\n        // Using jwt-decode npm package to decode the token\r\n        return decode(this.getToken());\r\n    }\r\n\r\n\r\n    fetch(url, options) {\r\n        // performs api calls sending the required authentication headers\r\n        const headers = {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n\r\n        // Setting Authorization header\r\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\r\n        if (this.loggedIn()) {\r\n            headers['Authorization'] = 'Bearer ' + this.getToken()\r\n        }\r\n\r\n        return fetch(url, {\r\n            headers,\r\n            ...options\r\n        })\r\n            .then(this._checkStatus)\r\n            .then(response => response.json())\r\n    }\r\n\r\n    _checkStatus(response) {\r\n        // raises an error in case response status is not a success\r\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\r\n            return response\r\n        } else {\r\n            var error = new Error(response.statusText)\r\n            error.response = response\r\n            throw error\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}